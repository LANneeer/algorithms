"""
Сейчас мы узнаем что такое циклы и код,
цыклы это небольшая часть кода которую мы запускаем по столько раз сколько мы хотим по условию
"""

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # создаем массив для работы с циклами

step = 0  # создаем переменную для того что-бы проходиться по списку

list_length = len(my_list)  # получаем длинну списку

"""
Сейчас что-бы нам по отдельности посмотреть каждый элемент списка,
нам нужно написать столько строк кода сколько элементов в нашем списке
Например:
"""
print(my_list[0])
print(my_list[1])
print(my_list[2])
print(my_list[3])
print(my_list[4])
print(my_list[5])
print(my_list[6])
print(my_list[7])
print(my_list[8])
"""
Та-даа, мы прошли по всем элементам списка, 
как ты видишь нам пришлось много всего писать и копировать,
что-бы это облегчить были придуманы цыклы,
так же обрати внимание на то что список начинает свой отчет с 0,
и так если у нас 9 элементов в списке, то мы пройдемся с 0 до 8
"""
print()  # просто создаем пропуск что-бы отличать в выводе один список от другого
"""
Это цикл while (от англ. - пока, до тех пор),
он выполняет тот код который находится в нем ровно столько раз сколько задано по условие.
Условие у него прописывается после того как мы напишем "while" и заканчивается как мы пишем ":",
понимание условия я описал в файле "variables.py"
"""

while step < list_length:  # создаем цикл с условием "пока этап меньше длинны списка"
    print(my_list[step])  # выводим элемент списка по номеру этапа
    step += 1  # передвигаемся к следующему элементу

"""
Ура, мы сократили с 9 строк кода в красивые 3,
и теперь если даже у нас будет 1000 элементов нам не прийдется писать еще 997 строк!
Циклы это просто повторение участка кода который поднят с помощью таба,

К примеру:

какой-то код 0
while условие:
    какой-то код 1
    какой-то код 2
какой-то код 3

Тут мы в цикле выполняем только "какой-то код 1" и "какой-то код 2", так как они находятся в цикле,
Это можно понять что они находятся немного выше других каких-то кодов
"""
print()  # просто создаем пропуск что-бы отличать в выводе один список от другого
"""
Давай приступим к другому циклу, циклу for!
Этот цикл помогает нам проходиться по списку не создавая какие-то переменные step,
мы просто проходимся по всем элемент списка и вытаскиваем их в отдельную переменную.

К примеру:

for переменная in my_list:
    print(переменная)

Теперь у нас все уменьшилось до 2х строк :D
мы просто создаем переменную в цикле перменную которая будет принимать значения элементов нашего списка.

Важно запомнить, после того как цикл закончится переменная все еще будет доступна, 
но она будет хранить в себе последний элемент списка и всего-то
"""

for element in my_list:  # создаем цикл
    print(element)  # внутри цикла выводим элементы


